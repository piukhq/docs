openapi: "3.0.0"
info:
  version: '2.0'
  title: Bink API
  description: 'This document defines the Bink API URLs, parameters, request bodies, responses. Each operation offers a mock end point. Regex patterns, minLength, and maxLength parameters are for front-end guidance only.'
  contact:
    email: mmorar@bink.com
  x-logo: 
    url: https://api.gb.bink.com/content/media/logos/bink_with_text.png
paths:
  /token:
    post:
      tags:
        - Token
      summary: "User registration, login and token refresh"
      description: "Use this endpoint to get a token for a new user, exisitng user or retrieve a refresh token.<br/><br/><h2>For grant_type\\: b2b</h2>The <code>POST /token</code> request requires an Authorization header with a Bearer token which is a signed JWT with the following claims:<body>
      <ul>
        <li><h3>Header claims:</h3></li>
        <ul>
          <li>**kid**: Key ID - Refers to the key-pair used to sign this JWT. **REQUIRED** </li>
        </ul>
          <li><h3>Body claims:</h3></li>
         <ul>
          <li>**sub**: Subject - A unique, immutable identifier for the user. If this ID does not exist, a new user will be created using this value and the email provided in the email claim. **REQUIRED**</li>
          <li>**email**: User’s e-mail address - Must be unique for the channel and is changeable only via the <code>POST /email_update</code> service. **OPTIONAL**</li>
          <li>**iat**: Issued At - This claim identifies the time at which the JWT was issued. This claim can be used to determine the age of the JWT. Its value MUST be a number containing a NumericDate value. **REQUIRED**</li>
          <li>**exp**: Expiry - This claim identifies the time at which the JWT expires. **REQUIRED**</li>
          </ul>
          </body></html>
          The client must sign the JWT with a private key. Bink will validate the signature against the public key and issue an access_token (see 200 response) if valid, or an error (400 or 401) if not.<br>
          <h2>For grant_type:refresh_token</h2>Requires an Authorisation header with a Bearer token. Provide the refresh_token value that will have been issued in a previous request to <code>POST /token</code>. This string is opaque to the client."
      operationId: token
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
            example:
              grant_type: b2b
              scope:
                - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponseSuccess'
        '400':
          description: '**Bad request** This response may include one of the following errors:<br/><br/>**- invalid_request:** The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed.<br/><br/>**- invalid_grant:** The provided authorization grant (e.g., Bearer token, authorization code, resource owner credentials) or refresh token is invalid, expired, or is revoked.<br/><br/>**- unauthorized_client:** The authenticated client is not authorized to use this authorization grant type.<br/><br/>**- unsupported_grant_type:** The authorization grant type (e.g., b2c, password) is not supported by the authorization server.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponseError'
        '401':
          description: '**Unauthorized:** This response may include one of the following errors:<br/><br/>**- invalid_client:** Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method).'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/TokenResponseError'
                  - example:
                      error: 'invalid_client'
  /wallet:
    get:
      security:
        - bearerAuth: []
      tags:
        - Wallet
      summary: Retrieve a User’s Wallet
      operationId: GET /wallets
      description: "Used to display the full contents of a user's wallet including: <br><html><body><ol>
      <li>Loyalty Cards:
        <ul>
          <li>Balance details.</li>
          <li>Transactions.</li>
          <li>Vouchers.</li>
        </ul>
      </li>  
      <li>Payment Acccounts.</li>
      <li>Join Requests.</li>
      <li>PLL Links.</li>
      </ol></body></html>
      <br>**NOTE:** Empty lists at any level in the JSON structure will be returned as\\: <code>key_name: []</code>. Other objects will be returned with all keys and associated values or with null keyword if blank, empty or unavailable.
      <br><br>In accordance with rules above, <code>joins</code>, <code>loyalty_cards</code>, and <code>payment_accounts</code> may be returned as empty lists."
      responses:
        '200':
          description: "**Successful**"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
              example:
                joins:
                    - loyalty_card_id: 51
                      loyalty_plan_id: 281
                      loyalty_plan_name: "Wasabi Club"
                      status:
                        state: "pending"
                        slug:
                        description:
                      images:
                        id: 290
                        type: 0
                        url: 'https://api.staging.gb.bink.com/content/media/hermes/schemes/Wasabi_hero_1968x732.png'
                        description: "Card Image for Wasabi hero"
                        encoding: "png"                  
                    - loyalty_card_id: 89
                      loyalty_plan_id: 105
                      loyalty_plan_name: "Iceland Bonus Card"
                      status:
                        state: "failed"
                        slug: ACCOUNT_EXISTS
                        description: "An account with those details already exists"
                      images:
                        id: 291
                        type: 0
                        url: 'https://api.staging.gb.bink.com/content/media/hermes/schemes/Hero_1968x732.png'
                        description: "Hero image"
                        encoding: "png"                        
                loyalty_cards:
                  - id: 81
                    loyalty_plan_id: 201
                    loyalty_plan_name: "Wasabi Club"
                    status:
                      state: "authorised"
                      slug:
                      description:
                    images:
                      - id: 290
                        type: 0
                        url: 'https://api.staging.gb.bink.com/content/media/hermes/schemes/Wasabi_hero_1968x732.png'
                        description: "Card Image for Wasabi hero"
                        encoding: "png"                      
                    balance:
                      updated_at: 1515697663
                      current_display_value: '2 stamps'
                    transactions:
                      - id: "100982384448"
                        timestamp: 1517549941
                        description: "Paddington Station £7.45"
                        display_value: "1 stamp"
                      - id: "100982345321"
                        timestamp: 1517549941
                        description: "Paddington Station £9.55"
                        display_value: "1 stamp"
                    vouchers:
                      - state: "inprogress"
                        earn_type: "stamps"
                        reward_text: "Meal Voucher"
                        headline: "Spend £7.00 or more to get a stamp. Collect 7 stamps to get a Meal Voucher of up to £7 off your next meal"
                        voucher_code:
                        barcode_type: 0
                        progress_display_text: "2/7 stamps"
                        prefix:
                        suffix: 'stamps'
                        current_value: 2
                        target_value: 7
                        body_text: "lorem ipsum"
                        terms_and_conditions: "http://baseurl/terms/terms.html%22"
                        issued_date: null
                        expiry_date: null
                        redeemed_date:
                      - state: "issued"
                        earn_type: "stamps"
                        reward_text: "Meal Voucher"
                        headline: "Earned"
                        voucher_code: "5544332211"
                        barcode_type: 1
                        progress_display_text:
                        prefix:
                        suffix:
                        current_value: 
                        target_value: 
                        body_text: "lorem ipsum"
                        terms_and_conditions: "http://baseurl/terms/terms.html%22"
                        issued_date: 1517549941
                        expiry_date: 1617549941
                        redeemed_date:
                    card:
                      barcode: "633174911234567898"
                      barcode_type: 0
                      card_number: "633174911234567898"
                      colour: '#FFFFFF'
                    pll_links:
                      - payment_account_id: 555
                        payment_scheme: VISA
                        status: active
                  - id: 85
                    loyalty_plan_id: 124
                    loyalty_plan_name: "Wasabi Club"
                    status:
                      state: "authorised"
                      slug:
                      description:
                    images:
                      - id: 290
                        type: 0
                        url: 'https://api.staging.gb.bink.com/content/media/hermes/schemes/Wasabi_hero_1968x732.png'
                        description: "Card Image for Wasabi hero"
                        encoding: "png"                      
                    balance:
                      updated_at: 1515697663
                      current_display_value: '150 points'
                    transactions:
                      - id: "100982384448"
                        timestamp: 1517549941
                        description: "Test transaction: 5 items"
                        display_value: "150 points"
                    vouchers:
                      []
                    card:
                      barcode: "633174911234567898"
                      barcode_type: 0
                      card_number: "633174911234567898"
                      colour: '#FFFFFF'
                    pll_links:
                      - payment_account_id: 555
                        payment_scheme: VISA
                        status: active
                payment_accounts:
                  - id: 555
                    status: 'active'
                    expiry_month: '12'
                    expiry_year: '24'
                    name_on_card: 'Jeff Jeffries'
                    card_nickname: 'My Visa'
                    images:
                      - id: 290
                        type: 0
                        url: 'https://api.staging.gb.bink.com/content/media/hermes/schemes/VISA.png'
                        description: "Card Image VISA"
                        encoding: "png"                    
                    pll_links:
                    - loyalty_card_id: 92744
                      loyalty_plan: 'Wasabi'
                      status: 'active'
                    - loyalty_card_id: 12445
                      loyalty_plan: 'Iceland'
                      status: 'active'
        '401':
          description: Not authorised, request does not have a valid token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse401'
  /wallet_overview:
    get:
      security:
        - bearerAuth: []
      tags:
        - Wallet
      summary: Retrieve a User’s Wallet Overview
      operationId: GET /wallet_overview
      description: "Used to display the high level contents of a user's wallet including: <br><html><body><ol>
      <li>Loyalty Cards:
        <ul>
          <li>Balance details.</li>
        </ul>
      </li>  
      <li>Payment Acccounts.</li>
      <li>Join Requests.</li>
      </ol></body></html>
      <br>**NOTE:** Empty lists at any level in the JSON structure will be returned as\\: <code>key_name: []</code>. Other objects will be returned with all keys and associated values or with null keyword if blank, empty or unavailable.
      <br><br>In accordance with rules above, <code>joins</code>, <code>loyalty_cards</code>, and <code>payment_accounts</code> may be returned as empty lists."     
      responses:
        '200':
          description: "**Successful**"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletOverview'
              example:
                joins:
                    - loyalty_card_id: 51
                      loyalty_plan_id: 246
                      loyalty_plan_name: "Wasabi Club"
                      status:
                        state: "pending"
                        slug:
                        description:
                      images:
                        id: 290
                        type: 0
                        url: 'https://api.staging.gb.bink.com/content/media/hermes/schemes/Wasabi_hero_1968x732.png'
                        description: "Card Image for Wasabi hero"
                        encoding: "png"  
                    - loyalty_card_id: 89
                      loyalty_plan_id: 246
                      loyalty_plan_name: "Wasabi Club"
                      status:
                        state: "failed"
                        slug: ACCOUNT_EXISTS
                        description: "An account with those details already exists"
                      images:
                        id: 290
                        type: 0
                        url: 'https://api.staging.gb.bink.com/content/media/hermes/schemes/Wasabi_hero_1968x732.png'
                        description: "Card Image for Wasabi hero"
                        encoding: "png"  
                loyalty_cards:
                  - id: 81
                    loyalty_plan_id: 246
                    loyalty_plan_name: "Wasabi Club"
                    status:
                      state: "authorised"
                      slug:
                      description:
                    images:
                      - id: 290
                        type: 0
                        url: 'https://api.staging.gb.bink.com/content/media/hermes/schemes/Wasabi_hero_1968x732.png'
                        description: "Card Image for Wasabi hero"
                        encoding: "png"
                    balance:
                      updated_at: 1515697663
                      current_display_value: '2 stamps'
                  - id: 85
                    loyalty_plan_id: 105
                    loyalty_plan_name: "Iceland Bonus Card"
                    status:
                      state: "authorised"
                      slug:
                      description:
                    images:
                      - id: 1234
                        type: 0
                        url: 'schemes/Iceland_Card.png'
                        description: "Iceland Slimming World hero card"
                        encoding: "png"
                    balance:
                      updated_at: 1515697663
                      current_display_value: '£0'
                payment_accounts:
                  - id: 556
                    status: 'active'
                    expiry_month: '12'
                    expiry_year: '24'
                    name_on_card: 'Jeff Jeffries'
                    card_nickname: 'My Visa'
                    images:
                      - id: 290
                        type: 0
                        url: 'https://api.staging.gb.bink.com/content/media/hermes/schemes/VISA.png'
                        description: "Card Image VISA"
                        encoding: "png" 
        '401':
          description: Not authorised, request does not have a valid token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse401'  
  /loyalty_plans:
    get:
      security:
        - bearerAuth: []
      tags:
        - Loyalty Plans
      summary: Retrieve all Loyalty Plans
      operationId: GET /loyalty_plans
      description: "Returns information for all defined **Loyalty Plans** supported by Bink that are included in the partner channel. Information includes:
      <html><body>
        <ol>
          <li>All field information to support Loyalty Card journeys:
            <ul>
              <li>Add.</li>
              <li>Authorise.</li>
              <li>Join.</li>
              <li>Register.</li>
            </ul>
          <li>Features of a Loyalty Plan.</li>
          <li>Loyalty Plan Images.</li>
          <li>Descriptive information for a Loyalty Plan.</li>
        </ol>
       </body></html>
       <br>This information can be used in the consuming application to provide the user with details about supported Loyalty Plans."
      responses:
        '200':
          description: "**Successful**"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyPlans'
        '401':
          description: Not authorised, request does not have a valid token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse401'
  /loyalty_plans/{loyalty_plan_id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Loyalty Plans
      summary: Retrieve a Loyalty Plan
      operationId: GET /loyalty_plans/{loyalty_plan_id}
      description: "Returns information for the specified **Loyalty Plan** supported by Bink included in the partner channel. Information includes:
      <html><body>
        <ol>
          <li>All field information to support Loyalty Card journeys:
            <ul>
              <li>Add.</li>
              <li>Authorise.</li>
              <li>Join.</li>
              <li>Register.</li>
            </ul>
          <li>Features of the Loyalty Plan.</li>
          <li>Loyalty Plan Images.</li>
          <li>Descriptive information for the Loyalty Plan.</li>
        </ol>
       </body></html>
       <br>This information can be used in the consuming application to provide the user with details about the supported Loyalty Plan."
      parameters:
        - in: path
          name: loyalty_plan_id
          description: Loyalty_Plan_Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "**Successful**"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyPlan'
        '401':
          description: Not authorised, request does not have a valid token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse401'
        '404':
          description: "Resource specified could not be found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse404'
  /loyalty_plans_overview: 
    get: 
      security:
        - bearerAuth: []
      tags: 
        - Loyalty Plans
      summary: Retrieve Loyalty Plan Overview
      operationId: GET /loyalty_plans_overview
      description: "Returns a subset of all **Loyalty Plan** information for all defined **Loyalty Plans** supported by Bink that are included in the partner channel. Information includes:
      <html><body>
        <ol>
          <li>Features of a Loyalty Plan.</li>
          <li>Loyalty Plan Images.</li>
          <li>Descriptive information for a Loyalty Plan.</li>
        </ol>
       </body></html>
       <br>This information can be used in the consuming application to provide the user with details about supported Loyalty Plans."
      responses:
        '200':
          description: "**Successful**"
          content:
            application/json:
              schema:
                allOf:
                - type: object
                  properties:
                    loyalty_plan_id:
                      type: integer
                      format: int64
                      example: 290
                - $ref: '#/components/schemas/LoyaltyPlanOverview'
        '401':
          description: Not authorised, request does not have a valid token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse401'
  /loyalty_plans/{loyalty_plan_id}/journey_fields:
    get:
      security:
        - bearerAuth: []
      tags:
        - Loyalty Plans
      summary: Retrieve journey fields for a Loyalty Plan
      operationId: GET /loyalty_plans/{loyalty_plan_id}/journey_fields
      description: "This endpoint returns all the fields a user needs to complete in order to follow available journeys in the specified **Loyalty Plan** supported by Bink included in the partner channel. Journeys are: 
      <html><body>
        <ol>
          <li>Adding a Loyalty Card.</li>
          <li>Authorising a Loyalty Card.</li>
          <li>Registering a Ghostcard.</li>
          <li>Joining a Loyalty Plan.</li>
        </ol>
       </body></html> 
          <br>The fields are displayed in the consuming application to capture user details and consents in order to process the journey."
      parameters:
        - in: path
          name: loyalty_plan_id
          description: Loyalty_Plan_Id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "**Successful**"
          content:
            application/json:
              schema:
                allOf:
                - type: object
                  properties:
                    loyalty_plan_id:
                      type: integer
                      format: int64
                      example: 290
                - $ref: '#/components/schemas/JourneyFieldSet'
        '401':
          description: Not authorised, request does not have a valid token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse401'
        '404':
          description: "Resource specified could not be found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse404'
  /loyalty_cards/add:
    post:
      security:
        - bearerAuth: []
      tags:
        - Loyalty Cards
      summary: Add a Loyalty Card
      operationId: POST /loyalty_cards/add
      description: "This will add a **Store** type **Loyalty Card** identified by a single credential field, usually <code>card_number</code> or <code>barcode</code>, to a users wallet. **Store** cards are digital representations of a **Loyalty Card** designed to be shown at the point of sale from the users mobile application.<br><br> Call this endpoint to create a **Store** type **Loyalty Card** if one does not exist. <br><br>Calling this endpoint on an existing **Loyalty Card** will return the <code>loyalty_card_id</code> and add it to the users wallet."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyCardAddRequest'
      responses:
        '200':
          description: "**OK** Everything worked as expected. Response contains resource Id."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCardProcessResponse'
        '201':
          description: "**Created** Response contains the resource Id."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCardProcessResponse'
        '400':
          description: '**Bad request** Client needs to modify the request before it can be retried'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse400'
        '401':
          description: '**Unauthorized** Client does not have valid token'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse401'
        '422':
          description: "**Unprocessable entity** Submitted credentials did not pass validation. One or more fields in the request did not pass the required validation**"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse422'
              example:
                error_message: "Could not validate fields"
                error_slug: "FIELD_VALIDATION_ERROR"
                fields:
                  - "expected str for dictionary value @ data['card_number']"
  /loyalty_cards/add_and_authorise:
    post:
      security:
        - bearerAuth: []
      tags:
        - Loyalty Cards
      summary: "Add and Authorise a Loyalty Card"
      operationId: POST /loyalty_cards/add_and_authorise
      description: "This will add an **Engage** or **PLL** type Loyalty Card into a users wallet. Adding authorisation credentials allows a user to see more information about their loyalty membership such as balance and transactions.  Authorisation also enables PLL for those Loyalty Plans that support it. <br><br>Call this endpoint to create an **Engage** type Loyalty Card if one does not exist. <br><br>Calling this endpoint on an existing Loyalty Card will return details of the Loyalty Card and add it to the users wallet, authorising it if the passed in credentials are correct. <br><br>**NOTE**: <br><li>If the card is a PLL type, success will automatically create PLL links to available Payment Accounts. <li>Some Loyalty Plans might not have any ADD fields, only AUTH fields, still use this endpoint to add cards of this nature."
      responses:
        '200':
          description: "**OK** Response contains resource ID. <br><br>Returned in cases where: <li>Card already added and authorised, or<li>Add and authorisation still in progress"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCardProcessResponse'
        '202':
          description: "**Accepted** Authorisation in progress.  Response contains resource Id."
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/LoyaltyCardProcessResponse'
        '400':
          description: '**Bad request** Client needs to modify the request before it can be retried'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse400'
        '401':
          description: '**Unauthorized** Client does not have valid token'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse401'
        '409':
          description: "**Conflict:** This request conflicts with the target resource's internal state. Possible error codes and messages:<pre>**ALREADY_ADDED**: Card already added. Use POST /loyalty_cards/authorise to authorise this card.<p/><p/>**ALREADY_AUTHORISED**: Card already authorised. Use POST /loyalty_cards/authorise to modify authorisation credentials.</pre>"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse404'
                  - example:
                      error_message: "Card already added. Use POST /loyalty_cards/authorise to authorise this card."
                      error_slug: "ALREADY_ADDED"
        '422':
          description: '**Unprocessable entity** One or more fields in the request did not pass the required validation. Possible error codes and messages:<pre>**FIELD_VALIDATION_ERROR**: Could not validate fields.<p/><p/>**CARD_CREDENTIALS_INCORRECT**: Credentials provided are not correct.</pre>'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse422'
              example:
                error_message: "Could not validate fields"
                error_slug: "FIELD_VALIDATION_ERROR"
                fields:
                  - "expected str for dictionary value @ data['card_number']"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyCardAddAuthoriseRequest'
  /loyalty_cards/{loyalty_card_id}/authorise:
    put:
      tags:
        - Loyalty Cards
      summary: Authorise a Loyalty Card
      operationId: PUT loyalty_cards/authorise
      description: "This is used to:<br>
      <html><body>
      <ol>
        <li>Authorise an exisitng **Store** type **Loyalty Card** promoting it to be an **Engage** or **PLL** type.</li>
        <li>Correct or update credentials on an **Engage** or **PLL** type **Loyalty Card**.</lil>
      </ol>
      </body></html><br>
        Authorised cards allow a user to see more information about their loyalty membership such as balance and transactions.<br>
        Authorisation also enables **PLL** for those **Loyalty Plans** that support it. 
        <br><br>**NOTE**: A successfully authorised **Loyalty Card** that is of type **PLL** will automatically create **PLL** links to available **Payment Accounts**."
      parameters:
        - in: path
          name: loyalty_card_id
          description: Loyalty Card ID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyCardAuthorisationRequest'
            example:
              account:
                authorise_fields:
                  credentials:
                  - credential_slug: 'password'
                    value: 'password123'              
      responses:
        '200':
          description: "**OK** Response contains resource ID. "
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCardProcessResponse'
        '202':
          description: "**Accepted** Authorisation in progress.  Response contains resource Id."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCardProcessResponse'
        '400':
          description: '**Bad request** Client needs to modify the request before it can be retried.'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse400'
        '401':
          description: '**Unauthorized** Client does not have valid token.'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse401'
        '404':
          description: "**Not found** Resource specified could not be found."
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse404'
        '422':
          description: "**Unprocessable entity:** One or more fields in the request did not pass the required validation. Possible error codes and messages:<pre>**FIELD_VALIDATION_ERROR**: Could not validate fields.<p/>**CARD_CREDENTIALS_INCORRECT:** Credentials provided are not correct.</pre>"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse422'
              example:
                error_message: "Could not validate fields"
                error_slug: "FIELD_VALIDATION_ERROR"
                fields:
                  - "expected str for dictionary value @ data['post_code']"
  /loyalty_cards/join:
    post:
      security:
        - bearerAuth: []
      tags:
        - Loyalty Cards
      summary: Join a Loyalty Plan
      operationId: POST /loyalty_cards/join
      description: "This resources reflects the users intent to **Join** a **Loyalty Plan**. Bink passes the intent to the relevant merchant and waits for them to process the request. A successful response from the merchant will see the **Join** resource become an **Engage** or **PLL** type **Loyalty Card**, failure leaves the resource in a failed state with an explanation. The user can delete the failure and try again. New **Join** requests to the same **Loyalty Plan** are independent.<br><br>**NOTE**: If the card is a **PLL** type, success will automatically create **PLL** links to available **Payment Accounts**."
      responses:
        '202':
          description: '**Accepted**, join in progress'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/LoyaltyCardProcessResponse'
        '400':
          description: Client needs to modify the request before it can be retried
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse400'
        '401':
          description: Client does not have valid token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse401'
        '422':
          description: Submitted credentials did not pass validation. One or more fields in the request did not pass the required validation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse422'
              example:
                error_message: "Could not validate fields"
                error_slug: "FIELD_VALIDATION_ERROR"
                fields:
                  - "expected str for dictionary value @ data['email']"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyCardJoinRequest'
            example: 
              loyalty_plan_id: 242
              account: 
                join_fields:
                  credentials:
                    - credential_slug: first_name
                      value: 'Joe'
                    - credential_slug: last_name
                      value: 'Blogs'
                    - credential_slug: date_of_birth
                      value: '10 January 1990'
                    - credential_slug: email
                      value: 'joe_blogs@bink.com'
                consents:
                  - consent_slug: EmailOptin
                    value: 'false'
        description: 'Loyalty Card Join Request'
  /loyalty_cards/{loyalty_card_id}/join:
    delete:
      security:
        - bearerAuth: []
      tags:
        - Loyalty Cards
      summary: Remove a failed Join request
      operationId: DELETE loyalty_cards/joins
      description: "Deletes a **Join** request that has not been successful.<br><br>**NOTE:** <code>pending</code> **Join** requests cannot be deleted, we need to know the response from the merchant before this action is allowed."
      parameters:
        - in: path
          name: loyalty_card_id
          description: the loyalty card join request identifier
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "**OK**, join request deleted"
        '401':
          description: Client does not have valid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericresponse401'
        '404':
          description: Resource specified could not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericresponse404'
        '409':
          description: Conflict. You cannot delete this card until join has completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericresponse409'
              example:
                error_message: "Loyalty card cannot be deleted until the Join process has completed"
                error_slug: "JOIN_IN_PROGRESS"   
  /loyalty_cards/add_and_register:
    post:
      security:
        - bearerAuth: []
      tags:
        - Loyalty Cards
      summary: 'Add and Register a Ghostcard'
      operationId: 'POST /loyalty_cards/add_and_register'
      description: "This endpoint adds a **Store** type **Loyalty Card** and attempts to register the user details in the request with the supported merchant. Registration is similar to **Join** except it involves a physical **Loyalty Card** picked up in store, commonly known as a **Ghostcard**. <br><br>If the registration fails, the user still has a **Store** type **Loyalty Card** in their wallet. Successful registration means the user is now a member of the **Loyalty Plan** and the **Loyalty Card** will be an **Engage** or **PLL** type in the user's wallet. <br><br>**NOTE**: If the card is a **PLL** type, success will automatically create **PLL** links to available **Payment Accounts**."
      responses:
        '200':
          description: "**OK** - returned if a registration request is sent while a preceding request is pending"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/LoyaltyCardProcessResponse'
        '202':
          description: "**Accepted**, registration in progress"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/LoyaltyCardProcessResponse'
        '400':
          description: '**Bad request** Client needs to modify the request before it can be retried'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse400'
        '401':
          description: '**Unauthorized** Client does not have valid token'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse401'
        '409':
          description: "**Conflict:** This request conflicts with the target resource's internal state. Possible error codes and messages:<pre>**ALREADY_REGISTERED**: Card is already registered. Use POST /loyalty_cards/add_and_authorise to add this card to your wallet.<p/>**ALREADY_ADDED:** Card is already added. Use PUT /loyalty_cards/{loyalty_card_id}/register to register this card.<p/>**REGISTRATION_ALREADY_IN_PROGRESS:** Card cannot be registered at this time - an existing registration is still in progress in another wallet.</pre>"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse404'
                  - example:
                      error_message: "Card is already registered"
                      error_slug: "ALREADY_REGISTERED"
        '422':
          description: Submitted credentials did not pass validation. One or more fields in the request did not pass the required validation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse422'
              example:
                error_message: "Could not validate fields"
                error_slug: "FIELD_VALIDATION_ERROR"
                fields:
                  - "expected str for dictionary value @ data['email']"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyCardAddAndRegistrationRequest'
        description: Loyalty Card Registration Request
  /loyalty_cards/{loyalty_card_id}/register:
    put:
      security:
        - bearerAuth: []
      tags:
        - Loyalty Cards
      summary: "Register a Ghostcard"
      operationId: "PUT /loyalty_cards/registration"
      description: "Used to add registration details to **Store** type **Loyalty Card** already in a user’s wallet and attempt to register those details with the supported merchant. **Registration** is similar to **Join** except it involves a physical **Loyalty Card** picked up in store, commonly known as a **Ghostcard**.<br> If the registration fails, the user still has the **Store** type **Loyalty Card** in their wallet. Successful registration means the user is now a member of the **Loyalty Plan** and the **Loyalty Card** will be an **Engage** or **PLL** type in the user's wallet. <br><br>**NOTE**: If the card is a **PLL** type, success will automatically create **PLL** links to available **Payment Accounts**."
      parameters:
        - in: path
          name: loyalty_card_id
          description: Loyalty Card ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "**OK** - returned if a registration request is sent while a preceding request is pending"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/LoyaltyCardProcessResponse'
        '202':
          description: "**Accepted**, registration in progress. Response contains resource ID."
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/LoyaltyCardProcessResponse'
        '400':
          description: '**Bad request** Client needs to modify the request before it can be retried'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse400'
        '401':
          description: '**Unauthorized** Client does not have valid token'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse401'
        '409':
          description: "**Conflict:** This request conflicts with the target resource's internal state. Possible error codes and messages:<pre>**ALREADY_REGISTERED**: Card is already registered. Use PUT /loyalty_cards/{loyalty_card_id}/authorise to authorise this card in your wallet, or to update authorisation credentials.<p/>**REGISTRATION_ALREADY_IN_PROGRESS:** Card cannot be registered at this time - an existing registration is still in progress in another wallet.</pre>"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse404'
                  - example:
                      error_message: "Card is already registered."
                      error_slug: "ALREADY_REGISTERED"
        '422':
          description: '**Unauthorized** Submitted credentials did not pass validation. One or more fields in the request did not pass the required validation'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse422'
              example:
                error_message: "Could not validate fields"
                error_slug: "FIELD_VALIDATION_ERROR"
                fields:
                  - "expected str for dictionary value @ data['email']"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyCardRegistrationRequest'
            example:
              account:
                register_ghost_card_fields:
                  credentials:
                    - credential_slug: "postcode"
                      value: "SW5SJT"
                  consents:
                    - consent_slug: "merch_t_and_c"
                      value: "false"
        description: Loyalty Card Registration Request
  /loyalty_cards/{loyalty_card_id}/balance:
    get:
      security: 
        - bearerAuth: []
      tags:
        - Loyalty Cards
      summary: "View Loyalty Card balance"
      operationId: GET /loyalty_plans/{loyalty_plan_id}/balance
      description: "Provides current balance information for the user's **Loyalty Card**."
      parameters:
        - in: path
          name: loyalty_card_id
          description: loyalty_card_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "**Successful**"
          content:
            application/json:
              schema:
                type: object
                properties: 
                  balance: 
                    $ref: '#/components/schemas/LoyaltyCardBalance'
        '401':
          description: Not authorised, request does not have a valid token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse401'
        '404':
          description: "Resource specified could not be found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse404'
  /loyalty_cards/{loyalty_card_id}/transactions:
    get:
      security: 
        - bearerAuth: []
      tags:
        - Loyalty Cards
      summary: "View Loyalty transactions"
      operationId: GET /loyalty_plans/{loyalty_plan_id}/transactions
      description: "Provides a list of the last 5 Loyalty transactions for the user's **Loyalty Card**"
      parameters:
        - in: path
          name: loyalty_card_id
          description: loyalty_card_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "**Successful**"
          content:
            application/json:
              schema:
                type: object
                properties: 
                  transactions: 
                    $ref: '#/components/schemas/LoyaltyCardTransactions'
        '401':
          description: Not authorised, request does not have a valid token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse401'
        '404':
          description: "Resource specified could not be found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse404'     
  /loyalty_cards/{loyalty_card_id}/vouchers:
    get:
      security: 
        - bearerAuth: []
      tags:
        - Loyalty Cards
      summary: "View Loyalty Card vouchers"
      operationId: GET /loyalty_plans/{loyalty_plan_id}/vouchers
      description: "Provides a list of the vouchers attached to the user's **Loyalty Card**. <br>Statuses can be:<html><body>
       <ul>
          <li>In Progress.</li>
          <li>Issued.</li>
          <li>Redeemed</li>
          <li>Expired.</li>
          <li>Cancelled.</li>
        </ul>
      </body></html>"
      parameters:
        - in: path
          name: loyalty_card_id
          description: loyalty_card_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "**Successful**"
          content:
            application/json:
              schema:
                type: object
                properties: 
                  vouchers: 
                    $ref: '#/components/schemas/Vouchers'
        '401':
          description: Not authorised, request does not have a valid token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse401'
        '404':
          description: "Resource specified could not be found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse404'    
  /loyalty_cards/{loyalty_card_id}:
    delete:
      security:
        - bearerAuth: []
      tags:
        - Loyalty Cards
      summary: Remove a Loyalty Card 
      operationId: DELETE loyalty_cards
      description: "Removes the specified **Loyalty Card** from the user’s wallet.<br> If the **Loyalty Card** is a **PLL** type, then **PLL** links will be removed if they are only present in that user’s wallet. If the **Loyalty Card** only exists in a single wallet, the **Loyalty Card** will be removed and all **PLL** links deleted"
      parameters:
        - in: path
          name: loyalty_card_id
          description: the loyalty card identifier
          required: true
          schema:
            type: integer
      responses:
        '202':
          description: "Accepted, deletion process started."
        '401':
          description: Client does not have valid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericresponse401'
        '404':
          description: Resource specified could not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericresponse404'
        '409':
          description: 'Conflict. Loyalty card cannot be deleted until the Join process has completed'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse409'
                  - example:
                      error_message: 'Loyalty card cannot be deleted until the Join process has completed'
                      error_slug: 'JOIN_IN_PROGRESS'
  /payment_accounts:
    post:
      security:
        - bearerAuth: []
      tags:
        - Payment Accounts
      summary: Create a Payment Account
      operationId: POST /payment_accounts
      description: "This resource represents a primary account number (PAN) which can be associated with one or more physical payment cards (e.g., with different expiry dates or cardholder names). <br><br>When posting to an existing account with the same **fingerprint**, if the following fields are different in the request, the stored values will be updated:
      <br><html><body>
      <ul>
        <li><code>expiry_month</code></li>
        <li><code>expiry_year</code></li>
        <li><code>name_on_card</code></li>
        <li><code>card_nickname</code></li>
        </ul></body></html>
        <br> 
        **NOTE**: Success will automatically create PLL links to available Authorised Loyalty Cards. We will also create **soft links** to PLL type cards not yet in an Authorised state, so when they do become Authorised, the PLL link will automatically become active."
      responses:
        '200':
          description: "**OK** - Returns details of existing account with the following fields replaced: <html><body><ul><li>expiry_month</li><li>expiry_year</li><li>name_on_card</li><li>card_nickname</li></ul></body></html>"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentAccountResponse'
        '201':
          description: "**Created** - Creates new payment account record. Response will include any optional fields sent in the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentAccountResponse'
        '400':
          description: 'Client needs to modify the request before it can be retried.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericresponse400'
        '401':
          description: 'Client does not have valid token.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericresponse401'
        '422':
          description: 'Field validation error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericresponse422'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentAccountCreateRequest'
  /payment_accounts/{payment_account_id}:
    patch:
      security:
        - bearerAuth: []
      tags:
        - Payment Accounts
      summary: Update Payment Account details
      operationId: PATCH payment_account
      description: "Certain fields on a **Payment Account** may be updated, the rest are immutable. Changing any of these fields has no functional effect on the **Payment Account**. Account status and **PLL** links are unaffected. <br>Fields that may be updated:
    <br><html><body>
      <ul>
        <li><code>expiry_month</code></li>
        <li><code>expiry_year</code></li>
        <li><code>name_on_card</code></li>
        <li><code>card_nickname</code></li>
        <li><code>issuer</code></li>
        </ul></body></html>
        <br> "
      parameters:
        - in: path
          name: payment_account_id
          description: the payment account identifier
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentAccountRequest'
        description: Payment Account Patch Request
      responses:
        '200':
          description: 'Successful, field updates confirmed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentAccountResponse'
        '400':
          description: 'Client needs to modify the request before it can be retried'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericresponse400'
        '401':
          description: 'Client does not have valid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericresponse401'
        '404':
          description: 'Resource specified could not be found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericresponse404'
        '422':
          description: 'Submitted credentials did not pass validation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericresponse422'
    delete:
      security:
        - bearerAuth: []
      tags:
        - Payment Accounts
      summary: Delete Payment Account
      operationId: DELETE payment_accounts
      description: "This removes a **Payment Account**. The **Payment Account** will only be removed from the specified wallet. Other wallets linked to the **Payment Account** with **PLL** links will be unaffected."
      parameters:
        - in: path
          name: payment_account_id
          description: the loyalty card add request identifier
          required: true
          schema:
            type: integer
      responses:
        '202':
          description: Accepted, account will be deleted
        '401':
          description: Client does not have valid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericresponse401'
        '404':
          description: Resource specified could not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericresponse404'

  /email_update:
    post:
      security:
        - bearerAuth: []
      tags:
      - Users
      summary: "Update user's e-mail address"
      operationId: post_email_update
      description: "Change a user's e-mail address. The user will be identified by the authorization token."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                email: 
                  type: string 
              example: 
                email: 'mymail@bink.com'
      responses:
        '200':
          description: "**Successful**"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
        '400':
          description: "Client needs to modify the request before it can be retried"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse400'
        '401':
          description: Client does not have valid token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse401'
        '409':
          description: "**Conflict:** This request conflicts with the target resource's internal state. Possible error codes and messages:<pre>**DUPLICATE_EMAIL**: This email is already in use for this channel</pre>"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse404'
                  - example:
                      error_message: "This email is already in use for this channel"
                      error_slug: "DUPLICATE_EMAIL"
        '422':
          description: "Submitted credentials did not pass validation. One or more fields in the request did not pass the required validation"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/genericresponse422'
              example:
                error_message: "Could not validate fields"
                error_slug: "FIELD_VALIDATION_ERROR"
                fields:
                  - "expected str for dictionary value @ data['email']"
  /me:
    delete:
      security:
        - bearerAuth: []
      tags:
      - Users
      summary: Delete a user
      operationId: delete-user
      description: "Deletes a user from the Bink platform. All associated payment accounts and loyalty cards will be deleted unless associated with another user account. User will be identified using the token passed in the request header"
      responses:
        '200':
          description: "**Successful**, account will be deleted"
        '401':
          description: Client does not have valid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericresponse401'
        '404':
          description: Resource specified could not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericresponse404' 
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    TokenRequest:
      type: object
      required:
        - grant_type
      properties:
        grant_type:
          type: string
          example: 'client_credentials'
          description: "REQUIRED. Value MUST be set to 'client_credentials'."
        scope:
          type: array
          description: "A list of space-delimited, case-sensitive strings. The strings are defined by the authorization server.  If the value contains multiple space-delimited strings, their order does not matter, and each string adds an additional access range to the requested scope."
          items:
            type: string
          example:
            - id
            - email
    TokenResponseSuccess:
      type: object
      required:
        - access_token
        - token_type
      properties:
        access_token:
          type: string
          example: '2YotnFZFEjr1zCsicMWpAA'
          description: "The access token issued by the authorization server."
        token_type:
          type: string
          description: "The type of the token issued. Value is case sensitive"
          example: 'bearer'
        expires_in:
          type: number
          description: "RECOMMENDED.  The lifetime in seconds of the access token. For example, the value '3600' denotes that the access token will expire in one hour from the time the response was generated. If omitted, the authorization server SHOULD provide the expiration time via other means or document the default value."
          example: 3600
        refresh_token:
          type: string
          description: "The refresh token, which can be used to obtain new access tokens using the same authorization grant"
          example: 'tGzv3JOkF0XG5Qx2TlKWIA'
        scope:
          type: array
          description: "A list of space-delimited, case-sensitive strings. The strings are defined by the authorization server.  If the value contains multiple space-delimited strings, their order does not matter, and each string adds an additional access range to the requested scope."
          items:
            type: string
          example:
            - user
    TokenResponseError:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: "One of the below error codes"
          enum:
            - invalid_request
            - invalid_client
            - invalid_grant
            - unauthorized_client
            - unsupported_grant_type
    LoyaltyCardJoinRequest:
      type: object
      properties:
        loyalty_plan_id:
          type: integer
          example: 242
          description: The Loyalty Plan to which this join request pertains
          minimum: 1
          maximum: 18446744073709552000
        account:
          type: object
          properties:
            join_fields:
              type: object
              properties: 
                credentials: 
                  minItems: 0
                  type: array
                  items:
                    $ref: '#/components/schemas/CredentialRequest'
                consents: 
                  type: array
                  items:
                    $ref: '#/components/schemas/ConsentRequest'
    LoyaltyCardAddRequest:
      type: object
      properties:
        loyalty_plan_id:
          type: integer
          example: 719
          description: The Loyalty Plan to which this card belongs
          minimum: 1
          maximum: 18446744073709552000
        account:
          type: object
          properties:
            add_fields: 
              type: object
              properties: 
                credentials:
                  type: array
                  items:
                    $ref: '#/components/schemas/CredentialRequest'
    LoyaltyCardAddAuthoriseRequest:
      allOf: 
        - $ref: '#/components/schemas/LoyaltyCardAddRequest'
        - type: object
          properties:
            account:
              type: object
              properties:
                authorise_fields:
                  allOf:
                  - $ref: '#/components/schemas/CredentialRequest'
                  - example:
                      credentials:
                        - credential_slug: 'password'
                          value: 'password123'
    LoyaltyCardAddAndRegistrationRequest:
      type: object
      properties:
        loyalty_plan_id:
          type: integer
          example: 242
          description: The Loyalty Plan to which this card belongs
          minimum: 1
          maximum: 18446744073709552000
        account:
          type: object
          properties:
            add_fields:
              type: object
              properties: 
                credentials:
                  minItems: 0
                  type: array
                  items:
                    $ref: '#/components/schemas/CredentialRequest'
            register_ghost_card_fields:
              type: object
              properties: 
                credentials: 
                  minItems: 0
                  type: array
                  items:
                    allOf: 
                    - $ref: '#/components/schemas/CredentialRequest'
                    example:
                      credential_slug: 'postcode'
                      value: 'SL5 5TD'                      
                consents: 
                  type: array
                  items:
                    $ref: '#/components/schemas/ConsentRequest'
    LoyaltyCardRegistrationRequest:
      type: object
      properties:
        account:
          type: object
          properties:
            register_ghost_card_fields:
              type: object
              properties: 
                credentials: 
                  minItems: 0
                  type: array
                  items:
                    $ref: '#/components/schemas/CredentialRequest'
                consents: 
                  type: array
                  items:
                    $ref: '#/components/schemas/ConsentRequest'
    LoyaltyCardAuthorisationRequest:
      type: object
      properties:
        account:
          type: object
          properties:
            authorise_fields:
              type: object
              properties:
                credentials:
                  type: array
                  items:
                    $ref: '#/components/schemas/CredentialRequest'
    LoyaltyCardProcessOverview:
      type: object
      properties:
        loyalty_card_id:
          type: integer
          description: Unique identifier for this process
          example: 556
          minimum: 1
          maximum: 18446744073709552000
          pattern: '^[0-9]+$'
        loyalty_plan_id:
          type: integer
        loyalty_plan_name:
          type: string
          example: "Wasabi Club"
        status:
          type: object
          nullable: true
          description: state of the loyalty card in a wallet
          properties:
            state: 
              type: string
              example: "active"
            slug:
              type: string
              nullable: true
              example: null
              description: if the loyalty card is in a state other than active, there will be a slug to describe the state
            description:
              type: string
              nullable: true
              example: null
              description: if the loyalty card is in a state other than active, there will be a description to describe the state of the card
        images: 
          $ref: '#/components/schemas/Images'
    LoyaltyCardProcess:
      type: object
      properties:
        loyalty_card_id:
          type: integer
          description: Unique identifier for this process
          example: 556
          minimum: 1
          maximum: 18446744073709552000
          pattern: '^[0-9]+$'
        loyalty_plan_id:
          type: integer
        loyalty_plan_name:
          type: string
          description: "Name of loyalty plan"
          example: "Wasabi Club"
        status:
          type: object
          nullable: true
          description: state of the loyalty card in a wallet
          properties:
            state: 
              type: string
              example: "active"
            slug:
              type: string
              nullable: true
              example: null
              description: if the loyalty card is in a state other than active, there will be a slug to describe the state
            description:
              type: string
              nullable: true
              example: null
              description: if the loyalty card is in a state other than active, there will be a description to describe the state of the card
        images: 
          $ref: '#/components/schemas/Images'
        error:
          type: object
          properties:
            error_slug:
              type: string
              description: 'Human-readable identifier that is easy to code against'
              example: 'ACCOUNT_EXISTS'
            error_message:
              type: string
              description: Short text explaining the error
              example: "An account with those details already exists"
    PaymentAccountCreateRequest:
      allOf:
      - $ref: '#/components/schemas/PaymentAccountRequest'
      - type: object
        required:
          - fingerprint
          - token
          - expiry_month
          - expiry_year
          - last_four_digits
          - first_six_digits
        properties:
          token:
            type: string
            description: Unique token for this card
            example: "H7FdKWKPOPhepzxS4MfUuvTDHxr"
            minLength: 1
            maxLength: 255
            pattern: "[\\u0000-\\u2FFF]{1,255}"
          last_four_digits:
            type: string
            description: 'The last four digits of PAN'
            example: "9876"
            minLength: 4
            maxLength: 4
            pattern: "^[0-9]{4,4}$"
          first_six_digits:
            type: string
            description: 'The leading six digits of PAN'
            example: "444444"
            minLength: 6
            maxLength: 6
            pattern: "^[0-9]{6,6}$"
          fingerprint:
            type: string
            example: b5fe350d5135ab64a8f3c1097fadefd9effb
            description: fingerprint value for this card
            minLength: 1
            maxLength: 100
            pattern: "[\\u0000-\\u2FFF]{1,100}"
          provider:
            type: string
            example: MasterCard
            description: 'Card scheme (e.g., VISA, American Express, MasterCard)'
            minLength: 1
            maxLength: 200
            pattern: "[\\u0000-\\u2FFF]{1,200}"
          type:
            type: string
            example: debit
            description: 'type of payment card, credit, debit etc.,'
            minLength: 1
            maxLength: 40
            pattern: "[\\u0000-\\u2FFF]{1,40}"
          country:
            type: string
            example: GB
            description: 'The country of origin of the payment card in accordance with ISO 3166-1 Alpha-2'
            minLength: 1
            maxLength: 40
            pattern: "[\\u0000-\\u2FFF]{1,40}"
          currency_code:
            type: string
            example: GBP
            description: currency code for this card
            minLength: 3
            maxLength: 3
            pattern: "^([A-Za-z]{3}|[0-9]{3})$"
    PaymentAccountRequest:
      type: object
      properties:
        expiry_month:
          type: string
          description: Expiry month for this card.
          example: "12"
          minLength: 1
          maxLength: 2
          pattern: "^(0?[1-9]|1[012])$"
        expiry_year:
          type: string
          description: Expiry year for this card.
          example: "24"
          minLength: 2
          maxLength: 2
          pattern: "^[0-9]{2}$"
        name_on_card:
          type: string
          example: Jeff Bloggs
          description: Card holder name printed on card
          minLength: 1
          maxLength: 150
          pattern: "^[\\u0000-\\u2FFF]{1,150}$"
        card_nickname:
          type: string
          example: 'My Mastercard'
          description: 'User-defined nickname for this card'
          minLength: 1
          maxLength: 150
          pattern: "^[\\u0000-\\u2FFF]{1,150}$"
        issuer:
          type: string
          example: 'HSBC'
          description: 'Card issuing institution'
          minLength: 1
          maxLength: 200
          pattern: "^[\\u0000-\\u2FFF]{1,200}$"
    PaymentAccountResponse:
      allOf:
        - $ref: '#/components/schemas/PaymentAccountRequest'
        - type: object
          properties:
            id:
              type: integer
              description: Unique identifier for this Payment Account
              example: 34237
              minimum: 1
              maximum: 18446744073709552000
              pattern: '^[0-9]+$'
            status:
              type: string
              example: active
              description: The current state of this payment card
              pattern: '[A-Za-z0-9]+'
              enum:
                - active
                - pending
                - failed
                - inactive
                - retired
    LoyaltyCardProcessResponse:
      type: object
      required:
        - loyalty_plan
      properties:
        id:
          type: integer
          example: 10683
          description: Unique ID for this loyalty card
          minimum: 1
          maximum: 18446744073709552000
          pattern: '^[0-9]+$'
    LoyaltyCardProperties:
      type: object
      properties:
        barcode:
          description: Barcode value for this Loyalty card
          example: '633174911234567898'
          minLength: 0
          maxLength: 50
          pattern: "[\\u0000-\\u2FFF]+"
          type: string
        barcode_type:
          description: 0=Code128(B or C); 1=QRCode;2=AztecCode;3=Pdf417;4=EAN(13);5=Datamatrix;6=ITF(Interleaved 2 of 5);7=Code39
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
          example: 0
          pattern: 0-9
          type: integer
        card_number:
          description: Account number for the retailer/merchant/loyalty scheme
          example: '633174911234567898'
          minLength: 1
          maxLength: 50
          type: string
        colour:
          description: background colour for card image - hex format
          example: '#FFFFFF'
          pattern: '^[#A-Fa-f0-9]{4,7}$'
          type: string
    LoyaltyCardBalance:
      type: object
      properties:
        updated_at:
          type: integer
          description: Indicates the time the balance information was last verified
          example: 1515697663
          pattern: '[0-9]+'
          minimum: 0
          maximum: 99999999999
        current_display_value:
          type: string
          description: Loyalty balance for this  card
          example: '100 points'
          minimum: 0
    Wallet:
      type: object
      properties:
          joins:
            type: array
            items:
              allOf:
              - $ref: '#/components/schemas/LoyaltyCardProcess'
          loyalty_cards:
            type: array
            items:
              $ref: '#/components/schemas/LoyaltyCard'
          payment_accounts:
            type: array
            items:
                $ref: '#/components/schemas/Payment_Account_Response'
    WalletOverview: 
      type: object
      properties:
        joins:
            type: array
            items:
              allOf:
              - $ref: '#/components/schemas/LoyaltyCardProcessOverview'
        loyalty_cards:
            type: array
            items:
              $ref: '#/components/schemas/LoyaltyCardOverview'
        payment_accounts:
            type: array
            items:
                $ref: '#/components/schemas/Payment_Account_ResponseOverview'
    LoyaltyCard:
      type: object
      properties:
        id:
          type: integer
          example: 10683
          description: Unique ID for this card
          minimum: 1
          maximum: 18446744073709552000
          pattern: '^[0-9]+$'
        loyalty_plan_id:
          type: integer
          example: 246
          description: The Loyalty Plan to which this Loyalty Card belongs
          minimum: 1
          maximum: 18446744073709552000
        loyalty_plan_name:
          type: string
          description: "Name of loyalty plan"
          example: "Wasabi Club"
        status:
          type: object
          nullable: true
          description: state of the loyalty card in a wallet
          properties:
            state: 
              type: string
              example: "active"
            slug:
              type: string
              nullable: true
              example: null
              description: if the loyalty card is in a state other than active, there will be a slug to describe the state
            description:
              type: string
              nullable: true
              example: null
              description: if the loyalty card is in a state other than active, there will be a description to describe the state of the card
        images: 
          $ref: '#/components/schemas/Images'
        balance:
          $ref: '#/components/schemas/LoyaltyCardBalance'
        transactions:
          $ref: '#/components/schemas/LoyaltyCardTransactions'
        vouchers:
          $ref: '#/components/schemas/Vouchers'
        card:
          $ref: '#/components/schemas/LoyaltyCardProperties'
        pll_links:
          $ref: '#/components/schemas/PLL_Link_Loyalty_Card_Response'
    LoyaltyCardOverview:
      type: object
      properties:
        id:
          type: integer
          example: 10683
          description: Unique ID for this card
          minimum: 1
          maximum: 18446744073709552000
          pattern: '^[0-9]+$'
        loyalty_plan_id:
          type: integer
          example: 246
          description: The Loyalty Plan to which this Loyalty Card belongs
          minimum: 1
          maximum: 18446744073709552000
        loyalty_plan_name:
          type: string
          example: "Iceland Bonus Card"
        status:
          type: object
          nullable: true
          description: state of the loyalty card in a wallet
          properties:
            state: 
              type: string
              example: "active"
            slug:
              type: string
              nullable: true
              example: null
              description: if the loyalty card is in a state other than active, there will be a slug to describe the state
            description:
              type: string
              nullable: true
              example: null
              description: if the loyalty card is in a state other than active, there will be a description to describe the state of the card
        images: 
          $ref: '#/components/schemas/Images'
        balance:
          $ref: '#/components/schemas/LoyaltyCardBalance'
    PLL_Link_Loyalty_Card:
      type: object
      description: Payment-Linked Loyalty (PLL) link between payment account and loyalty card.
      properties:
        payment_account:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1234
            payment_scheme:
              type: string
              example: 'VISA'
            status:
              type: string
              enum:
                - active
                - pending
              example: active
    PLL_Link_Loyalty_Card_Response:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/PLL_Link_Loyalty_Card'
          - type: object
            description: Payment-Linked Loyalty (PLL) link between payment account and loyalty card.
    PLL_Link_Payment_Card:
      type: object
      description: Payment-Linked Loyalty (PLL) link between payment account and loyalty card.
      properties:
        loyalty_card_id:
          type: integer
          format: int64
          example: 8737645
          description: ID of loyalty card that is linked to the given payment account
        loyalty_plan:
          type: string
          example: 'Iceland'
        status:
          type: string
          example: 'active'
    Payment_Account_Response:
      type: object
      properties:
        payment_account_id:
          type: string
          example: '555'
        status:
          type: string
          enum:
            - active
            - pending
          example: "active"
        expiry_month:
          type: string
          example: '05'
        expiry_year:
          type: string
          example: '24'
        name_on_card:
          type: string
          example: 'Jeff Jeffries'
        card_nickname:
          type: string
          example: 'My Visa'
        images: 
          $ref: '#/components/schemas/Images'
        pll_links:
          type: array
          items:
            $ref: '#/components/schemas/PLL_Link_Payment_Card'
    Payment_Account_ResponseOverview:
      type: object
      properties:
        payment_account_id:
          type: string
          example: '555'
        status:
          type: string
          enum:
            - active
            - pending
          example: "active"
        expiry_month:
          type: string
          example: '05'
        expiry_year:
          type: string
          example: '24'
        name_on_card:
          type: string
          example: 'Jeff Jeffries'
        card_nickname:
          type: string
          example: 'My Visa'
        images: 
          $ref: '#/components/schemas/Images'
    LoyaltyPlanOverview: 
      type: object
      properties: 
        loyalty_plan_id:
          type: integer
          format: int64
          example: 109
        plan_popularity:
          type: integer
          description: Numeric rank for this plan's popularity
          minimum: 1
          maximum: 18446744073709552000
          pattern: '^[0-9]+$'
          example: 2        
        company_name:
          type: string
          description: Merchant or loyalty provider name
          example: Wasabi
          minLength: 0
          maxLength: 200
          pattern: "[\\u0000-\\u2FFF]+"
        plan_name:
          type: string
          description: The merchant’s plan name - Brand + scheme name - not to be used in conjunction with plan_name_card
          example: 'Wasabi Club'
          minLength: 0
          maxLength: 50
          pattern: "[\\u0000-\\u2FFF]+"   
        plan_type:
          type: integer
          description: 'Store = 0 | View = 1 | Link = 2'
          example: 2
          minimum: 0
          maximum: 9
          pattern: '[0-9]'    
        colour:
          type: string
          description: background colour for card image - hex format
          example: '#f80000'
          pattern: '^[#A-Fa-f0-9]{4,7}$'  
        category:
          type: string
          description: Market sector or retail category
          example: Household
          minLength: 0
          maxLength: 200
          pattern: "[\\u0000-\\u2FFF]+"   
        images: 
          $ref: '#/components/schemas/Images'
    LoyaltyPlan:
      type: object
      properties:
        loyalty_plan_id:
          type: integer
          format: int64
          example: 109
        plan_popularity:
          type: integer
          description: Numeric rank for this plan's popularity
          minimum: 1
          maximum: 18446744073709552000
          pattern: '^[0-9]+$'
          example: 2
        plan_features:
          type: object
          properties:
            has_points:
              type: boolean
              example: true
              description: Identifies whether there is a balance for this card
              pattern: '^([Tt][Rr][Uu][Ee]|[Ff][Aa][Ll][Ss][Ee])$'
            has_transactions:
              type: boolean
              example: true
              description: 'Specifies if this plan supports display of transaction history'
              pattern: '^([Tt][Rr][Uu][Ee]|[Ff][Aa][Ll][Ss][Ee])$'
            plan_type:
              type: integer
              description: 'Store = 0 | View = 1 | Link = 2'
              example: 2
              minimum: 0
              maximum: 9
              pattern: '[0-9]'
            barcode_type:
              type: integer
              description: 0=Code128(B or C); 1=QRCode;2=AztecCode;3=Pdf417;4=EAN(13);5=Datamatrix;6=ITF(Interleaved 2 of 5);7=Code39
              enum:
                - 0
                - 1
                - 2
                - 3
                - 4
                - 5
                - 6
                - 7
                - 8
                - 9
              example: 0
              pattern: 0-9
            colour:
              type: string
              description: background colour for card image - hex format
              example: '#f80000'
              pattern: '^[#A-Fa-f0-9]{4,7}$'  
            journeys:
              type: array
              items:
                type: object
                properties:
                  type: 
                    type: integer
                    minimum: 0
                    maximum: 99999
                    pattern: "[0-9]+"
                    example: 0
                  description: 
                    type: string
                    minLength: 1
                    maxLength: 50
                    pattern: "[A-Z]+"
                    description: 'Types of journeys that this plan supports. 0 / ADD - Link an existing card. 1 / AUTHORISE - connect to the loyalty account for points and transactions. 2 / REGISTER - of existing ghost cards.  3 /JOIN - Sign up for a new loyalty account, card, or membership. '
                    enum:
                      - ADD
                      - REGISTER
                      - JOIN
                      - AUTHORISE
                    example: "ADD"
        images:
          $ref: '#/components/schemas/Images'
        plan_details:
          type: object
          properties:
            company_name:
              type: string
              description: Merchant or loyalty provider name
              example: Wasabi
              minLength: 0
              maxLength: 200
              pattern: "[\\u0000-\\u2FFF]+"
            plan_name:
              type: string
              description: The merchant’s plan name - Brand + scheme name - not to be used in conjunction with plan_name_card
              example: 'Wasabi Club'
              minLength: 0
              maxLength: 50
              pattern: "[\\u0000-\\u2FFF]+"
            plan_label:
              type: string
              description: 'The merchant’s name for the instrument when describing the plan itself. E.g., card or account'
              example: 'Card'
              minLength: 0
              maxLength: 50
              pattern: "[\\u0000-\\u2FFF]+"
            plan_url:
              type: string
              description: URL relating to this membership plan
              example: 'https://www.wasabi.uk.com'
              maxLength: 2048
              minLength: 1
              pattern: "((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)"
            plan_summary:
              type: string
              description: Short form description for this plan
              example: 'Collect 7 stamps for a £7 OFF Meal Voucher. One stamp can be earned per customer per transaction when the qualifying spend in a single transaction for food & drink purchases totals £7.00 or more in a participating Wasabi store. Ts and Cs apply.'
              minLength: 0
              maxLength: 250
              pattern: "[\\u0000-\\u2FFF]+"
            plan_description:
              type: string
              description: Full description for this membership plan
              example: 'Please note that your vouchers are single-use and cannot be used twice. Show your Wasabi Club reward code in store to redeem £7 off your next meal.\r\nThe voucher will be available to redeem 2 months from the date it is collected. This voucher is non-refundable and cannot be exchanged for cash in part or full and is valid for a single transaction only.'
              minLength: 0
              maxLength: 500
              pattern: "[\\u0000-\\u2FFF]+"
            redeem_instructions:
              type: string
              description: 'How to redeem points using this barcode'
              example: "At checkout, simply tell the cashier how much money you would like to save or redeem, present the barcode below and scan it using the customer facing scanners, as you normally would with your physical card."
              minLength: 0
              maxLength: 500
              pattern: "[\\u0000-\\u2FFF]+"
            plan_register_info:
              type: string
              description: 'Instructions for unregistered loyalty cards'
              example: 'You have added a temporary card. You’ll need to register it to enjoy the full benefits of the programme.'
              minLength: 0
              maxLength: 500
              pattern: "[\\u0000-\\u2FFF]+"
            join_incentive:
              type: string
              description: Describing the incentives for enrolling
              example: 'Join now and receive free points'
              minLength: 0
              maxLength: 200
              pattern: "[\\u0000-\\u2FFF]+"
            category:
              type: string
              description: Market sector or retail category
              example: Household
              minLength: 0
              maxLength: 200
              pattern: "[\\u0000-\\u2FFF]+"
            tiers:
              description: 'For plans with multiple membership levels'
              type: array
              minItems: 0
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: Silver
                    minLength: 0
                    maxLength: 50
                    pattern: "[\\u0000-\\u2FFF]+"
                  description:
                    type: string
                    example: Double points earned
                    minLength: 0
                    maxLength: 50
                    pattern: "[\\u0000-\\u2FFF]+"
        journey_fields:
          $ref: '#/components/schemas/JourneyFieldSet'
        content:
          type: array
          minItems: 0
          maxItems: 9999
          items:
            type: object
            properties:
              column:
                type: string
                minLength: 0
                maxLength: 250
                pattern: "[\\u0000-\\u2FFF]+"
              value:
                type: string
                minLength: 0
                maxLength: 500
                pattern: "[\\u0000-\\u2FFF]+"
          example:
            - column: Voucher_Stamps_Inprogress_Detail
              value: 'Text from merchant - how to earn voucher.'
            - column: Voucher_Stamps_Issued_Detail
              value: 'Text from merchant - how to use voucher.'
            - column: Voucher_Stamps_Redeemed_Detail
              value: 'Text from merchant - voucher has been redeemed.'
            - column: Voucher_Stamps_Expired_Detail
              value: 'Text from merchant - vouhcer has expired.'
    Credentials:
      $ref: '#/components/schemas/RegisterCredentialSet'
    LoyaltyPlans:
      type: array
      items:
        $ref: '#/components/schemas/LoyaltyPlan'
    Images: 
      type: array
      items:
        minItems: 0
        type: object
        properties:
          id:
            type: integer
            minimum: 1
            maximum: 18446744073709552000
            pattern: '^[0-9]+$'
            example: 290
          type:
            type: integer
            minimum: 0
            maximum: 9
            example: 0
            pattern: '[0-9]'
            description: "0=HERO, 1=BANNER, 2=OFFER, 3=ICON, 4=ASSET, 5=REFERENCE, 6=PERSONAL_OFFERS, 7=PROMOTIONS, 8=TIER, 9=ALTERNATIVE"
          url:
            type: string
            description: Full URL for image
            example: 'https://api.staging.gb.bink.com/content/media/hermes/schemes/Wasabi_Promo_1968x732.png'
            pattern: "((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)"
          description:
            type: string
            description: Image Type description
            example: Join now and start saving
            minLength: 0
            maxLength: 500
            pattern: "[\\u0000-\\u2FFF]+"
          encoding:
            type: string
            enum:
              - png
              - jpg
              - svg
            description: Encoding for this file
            example: png
    PlanDocumentRequest:
      type: object
      description: ""
      properties:
        name:
          type: string
          description: "Specifies the document name as provided in this plan's journey fields"
          example: "Terms & conditions"
        value:
          type: string
          description: 'Value associated with this field.'
          example: "Terms & conditions"
    CredentialRequest:
      type: object
      description: "Refer to Loyalty Plan Validation GET /loyalty_plan for the relevant plan field for allowed input pattern and length"
      properties:
        credential_slug:
          type: string
          description: Specifies the input field common name or key. Relevant 'add', 'authorisation', 'join' and 'register' fields for an asscociated loyalty plan can be found in GET /loyalty_plans
          example: 'card_number'
        value:
          type: string
          description: 'Value associated with this field.'
          example: '198749238749'
    ConsentRequest:
      type: object
      description: ""
      properties:
        consent_slug:
          type: string
          description: "The merchant consent as provided in Journey Fields"
          example: 'merch_t_and_c'
        value:
          type: string
          description: 'Value associated with this field.'
          example: 'false'    
    RegisterCredentialSet:
      $ref: '#/components/schemas/CredentialSet'
    JourneyFieldSet:
      type: object
      properties:
        register_ghost_card_fields:
          allOf:
          - $ref: '#/components/schemas/JourneyFields'
          - example:
              credentials:
              - order: 1
                display_label: 'Card number'
                validation: "^((63317491)|(63317492))[0-9]{10}$"
                description: "Your 10 digit card number"
                credential_slug: "card_number"
                type: "text"
                is_sensitive: false
                choice: []
                alternative:
              - order: 2
                display_label: 'Email address'
                validation: '^(?=[^@]{1,64}@)(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                description: "Your e-mail address"
                credential_slug: "email"
                type: "text"
                is_sensitive: false
                choice: []
                alternative:
              - order: 3
                display_label: 'Password'
                validation: '^(?=[^@]{1,64}@)(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                description: "The password you use to log in to your loyalty account"
                credential_slug: "password"
                type: "text"
                is_sensitive: true
                choice: []
                alternative:
              - order: 4
                display_label: 'Title'
                description: "Select title or salutation"
                credential_slug: "title"
                type: "choice"
                is_sensitive: false
                choice:
                  - Mr
                  - Mrs
                  - Miss
                  - Dame
                  - Ms
                  - Sir
                  - Doctor
                  - Professor
                  - Lord
                  - Lady
                alternative:
              - order: 5
                display_label: 'First name'
                description: "First name"
                credential_slug: "first_name"
                type: "string"
                is_sensitive: false
                choice: []
                alternative:
              - order: 6
                display_label: 'Last name'
                description: "Last name"
                credential_slug: "last_name"
                type: "string"
                is_sensitive: false
                choice: []
                alternative:
              plan_documents:
                - order: 7
                  name: "Retailer terms and conditions"
                  url: "https://policies.address.com/retailer/tc.html%22"
                  is_acceptance_required: true
                  description: "I accept the "
              consents:
                - order: 8
                  name: "notification_marketing"
                  is_acceptance_required: true
                  description: "Check this box to receive notifications"
        join_fields:
          allOf:
          - $ref: '#/components/schemas/JourneyFields'
          - example:
              credentials:
              - order: 1
                display_label: 'Email address'
                validation: '^(?=[^@]{1,64}@)(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                description: "Your e-mail address"
                credential_slug: "email"
                type: "text"
                is_sensitive: false
                choice: []
                alternative:
              - order: 2
                display_label: 'Password'
                validation: '^(?=[^@]{1,64}@)(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                description: "The password you use to log in to your loyalty account"
                credential_slug: "password"
                type: "text"
                is_sensitive: true
                choice: []
                alternative:
              - order: 3
                display_label: 'Title'
                description: "Select title or salutation"
                credential_slug: "title"
                type: "choice"
                is_sensitive: false
                choice:
                  - Mr
                  - Mrs
                  - Miss
                  - Dame
                  - Ms
                  - Sir
                  - Doctor
                  - Professor
                  - Lord
                  - Lady
                alternative:
              - order: 4
                display_label: 'First name'
                description: "First name"
                credential_slug: "first_name"
                type: "string"
                is_sensitive: false
                choice: []
                alternative:
              - order: 5
                display_label: 'Last name'
                description: "Last name"
                credential_slug: "last_name"
                type: "string"
                is_sensitive: false
                choice: []
                alternative:
              plan_documents:
                - order: 6
                  name: "Retailer terms and conditions"
                  url: "https://policies.address.com/retailer/tc.html%22"
                  is_acceptance_required: true
                  description: "I accept the "
              consents:
                - order: 7
                  name: "notification_marketing"
                  is_acceptance_required: true
                  description: "Check this box to receive notifications"
        add_fields:
          allOf:
          - $ref: '#/components/schemas/JourneyFields'
          - example:
              credentials:
              - order: 1
                display_label: 'Barcode'
                description: "Scan the barcode printed on your card"
                credential_slug: "barcode"
                type: "text"
                is_sensitive: false
                choice: []
                alternative:
                  order: 1
                  display_label: 'Bonus card number'
                  validation: "^((63317491)|(63317492))[0-9]{10}$"
                  description: "Your 10 digit card number"
                  credential_slug: "card_number"
                  type: "text"
                  is_sensitive: false
                  choice: []
              plan_documents:
              -
              consents:
              -
        authorise_fields:
          allOf:
          - $ref: '#/components/schemas/JourneyFields'
          - example:
              credentials:
              - order: 1
                display_label: 'Password'
                validation: '^(?=[^@]{1,64}@)(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                description: "The password you use to log in to your loyalty account"
                credential_slug: "password"
                type: "text"
                is_sensitive: true
                choice: []
                alternative:
              plan_documents:
              -
              consents:
              -
    JourneyFields:
      type: object
      properties:
        credentials:
          $ref: '#/components/schemas/CredentialSet'
        plan_documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentBase'
        consents:
          type: array
          items:
            $ref: '#/components/schemas/ConsentBase'
    CredentialSet:
      type: array
      minItems: 0
      items:
        allOf:
          - $ref: '#/components/schemas/CredentialBase'
          - $ref: '#/components/schemas/CredentialAlternative'
    CredentialBase:
      type: object
      properties:
        order:
          type: integer
          description: 'Specifies the order in which to display this credential'
          example: 1
          minimum: 1
          maximum: 9999
          pattern: "[0-9]+"
        display_label:
          type: string
          description: Column name for metadata
          example: "First Name"
          minLength: 0
          maxLength: 250
          pattern: "[A-Za-z0-9_\\s]"
        validation:
          type: string
          description: Regular expression to validate input value
          example: '^((63317491)|(63317492))[0-9]{10}$'
          minLength: 0
          maxLength: 250
          pattern: ".*"
        description:
          type: string
          description: A description of this field to display to the user
          example: Your 18 digit card number
          minLength: 0
          maxLength: 250
          pattern: "[\\u0000-\\u2FFF]+"
        credential_slug:
          type: string
          description: A common name of the field used for mapping or prepopulating data into this column
          example: first_name
          minLength: 0
          maxLength: 250
          pattern: "[\\u0000-\\u2FFF]+"
        type:
          type: string
          description: 'The field type text, boolean, choice (e.g., for a drop-down list)'
          enum:
            - text
            - boolean
            - choice
          example: text
          pattern: "[\\u0000-\\u2FFF]+"
        is_sensitive:
          type: boolean
          description: 'Indicates whether or not this field is sensitive and therefore requires field-level encryption'
        choice:
          type: array
          description: An array of values if this field is a choice type
          minItems: 0
          maxItems: 99
          items:
            type: string
          example: ["Mrs", "Dr", "Prof"]
          minLength: 0
          maxLength: 50
          pattern: "[\\u0000-\\u2FFF]+"
    CredentialAlternative:
      type: object
      properties:
        alternative:
          $ref: '#/components/schemas/CredentialBase'
    LoyaltyCardBalanceResponse:
      type: object
      properties:
        updated_at:
          type: integer
          example: 1517549941
          description: 'The date and time that Bink successfully retrieved a balance for the loyalty card'
        current_display_value:
          type: string
          example: '£30'
          description: 'The value of the loyalty card - points, currency, etc'
    LoyaltyCardTransactions:
      type: array
      minItems: 0
      items:
        allOf:
        - $ref: '#/components/schemas/LoyaltyCardTransactionsResponse'
    LoyaltyCardTransactionsResponse:
      type: object
      properties:
        id:
          type: string
          example: '100982384448'
          description: 'The transaction identifier from the merchant'
        timestamp:
          type: integer
          example: 1517549941
          description: 'Time and date of the transaction'
        description: 
          type: string
          example: 'Purchase at Iceland Brighton'
          description: human readable string from the merchant
        display_value:
          type: string
          example: '150 points'
          description: Value of transaction awarded to the loyalty card received from the merchant
    ConsentBase:
      type: object
      properties:
        consent_slug:
          type: string
          example: 'notification_marketing'
          pattern: "[\\u0000-\\u2FFF]+"
        is_acceptance_required:
          type: boolean
          example: true
          description: 'Indicates whether or not the user must accept this document'
        order:
          type: integer
          description: 'Specifies the order in which to display this field'
          example: 1
          minimum: 1
          maximum: 9999
          pattern: "[0-9]+"
        description:
          type: string
          example: "Check this box to receive notifications"
          pattern: "[\\u0000-\\u2FFF]+"
    DocumentBase:
      type: object
      properties:
        name:
          type: string
          example: 'Retailer terms and conditions'
          pattern: "[\\u0000-\\u2FFF]+"
        url:
          type: string
          example: 'https://policies.address.com/retailer/tc.html%22'
          pattern: "[\\u0000-\\u2FFF]+"
        is_acceptance_required:
          type: boolean
          example: true
          description: 'Indicates whether or not the user must accept this document'
        order:
          type: integer
          description: 'Specifies the order in which to display this field'
          example: 1
          minimum: 1
          maximum: 9999
          pattern: "[0-9]+"
        description:
          type: string
          example: "I accept the "
          pattern: "[\\u0000-\\u2FFF]+"
    ID:
      type: object
      required:
        - id
      properties:
        id:
          type: number
          description: 'Resource identifier'
          example: 134
    genericresponse400:
      type: object
      required:
        - error_message
        - error_slug
      properties:
        error_message:
          type: string
          description: 'error message that could be displayed to a user'
          example: 'Invalid JSON'
        error_slug:
          type: string
          description: 'Human-readable identifier that is easy to code against'
          example: 'MALFORMED_REQUEST'
    genericresponse401:
      type: object
      required:
        - error_message
        - error_slug
      properties:
        error_message:
          type: string
          description: 'error message that could be displayed to a user'
          example: 'Supplied token is invalid'
        error_slug:
          type: string
          description: 'Human-readable identifier that is easy to code against'
          example: 'INVALID_TOKEN'
    genericresponse404:
      type: object
      required:
        - error_message
        - error_slug
      properties:
        error_message:
          type: string
          description: 'error message that could be displayed to a user'
          example: 'Could not find this account or card'
        error_slug:
          type: string
          description: 'Human-readable identifier that is easy to code against'
          example: 'RESOURCE_NOT_FOUND'
    genericresponse409:
      type: object
      required:
        - error_message
        - error_slug
      properties:
        error_message:
          type: string
          description: 'error message that could be displayed to a user'
          example: 'Could not process request due to a conflict'
        error_slug:
          type: string
          description: 'Human-readable identifier that is easy to code against'
          example: 'CONFLICT'
    genericresponse422:
      type: object
      required:
        - error_message
        - error_slug
        - fields
      properties:
        error_message:
          type: string
          description: 'error message that could be displayed to a user'
          example: 'Could not validate fields'
        error_slug:
          type: string
          description: 'Human-readable identifier that is easy to code against'
          example: 'FIELD_VALIDATION_ERROR'
        fields:
          description: 'list of fields that failed validation'
          type: array
          items:
            type: string
          example:
            - "expected str for dictionary value @ data['last_four_digits']"
            - "required key not provided @ data['expiry_year']"
            - "required key not provided @ data['expiry_month']"
    Vouchers:
      type: array
      items: 
        $ref: '#/components/schemas/Voucher'
    Voucher:
      description: 'Represents a voucher attached to a Loyalty Card'
      type: object
      properties: 
        state:
          type: string
          nullable: true
          example: inprogress
          description: "This voucher's current state"
          enum:
            - redeemed
            - issued
            - inprogress
            - expired
            - cancelled
          minLength: 0
          maxLength: 50
          pattern: '[A-Za-z0-9]+'
        earn_type: 
          type: string
          example: 'stamps'
        reward_text: 
          type: string
          nullable: true
          example: 'Meal Voucher'        
          minLength: 0
          maxLength: 250
          pattern: "[\\u0000-\\u2FFF]+"
        headline:
          example: 'Spend £7.00 or more to get a stamp. Collect 7 stamps to get a Meal Voucher of up to £7 off your next meal'
          type: string
          nullable: true
          description: "A string that describes this voucher's disposition in a readable way"
          minLength: 0
          maxLength: 250
          pattern: "[\\u0000-\\u2FFF]+"  
        voucher_code: 
          type: string
          nullable: true
          description: Voucher code
          minLength: 0
          maxLength: 50
          example: '5544332211'
        barcode_type:
          type: integer
          description: '0=Code128(B or C); 1=QRCode;2=AztecCode;3=Pdf417;4=EAN(13);5=Datamatrix;6=ITF(Interleaved 2 of 5);7=Code39'
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
          pattern: 0-9
        progress_display_text:
          type: string
          nullable: true
          description: "Describes the inprogress voucher's progress"
          minLength: 0
          maxLength: 250
          pattern: "[\\u0000-\\u2FFF]+"   
          example: '2/7 stamps'
        prefix:
          type: string
          description: Pre-qualifier for earned and target values - usually a currency symbol
          minLength: 0
          maxLength: 50
          pattern: "[\\u0000-\\u2FFF]+"
        suffix:
          type: string
          description: Post-qualifier for earned and target values such as stamps or visits
          minLength: 0
          maxLength: 50
          pattern: "[\\u0000-\\u2FFF]+"
        target_value:
          type: number
          description: Target spend value
          minimum: 0
          maximum: 9999999
        current_value:
          type: number
          description: Spent so far against target
          minimum: 0
          maximum: 9999999
        body_text: 
          type: string
          nullable: true
          description: Additional explanatory text
          minLength: 0
          maxLength: 250
          pattern: "[\\u0000-\\u2FFF]+"   
        terms_and_conditions:
          type: string
          nullable: true
          description: URL of terms and conditions for a voucher, if applicable
          minLength: 0
          maxLength: 250
          pattern: "[\\u0000-\\u2FFF]+"  
          example: "http://baseurl/terms/terms.html%22"
        issued_date:
          description: date voucher was issued
          type: integer
          nullable: true
          pattern: '[0-9]+'
          example: 1517549941
          minimum: 0
          maximum: 99999999999
        expiry_date:
          type: integer
          nullable: true
          description: Date voucher will expire
          pattern: '[0-9]+'
          minimum: 0
          maximum: 99999999999
          example: 1617549941
        redeemed_date:
          description: date of voucher redemption
          type: integer
          nullable: true
          pattern: '[0-9]+'
          minimum: 0
          maximum: 99999999999
          example: 1617549941
tags:
  - name: Token
  - name: Users
  - name: Loyalty Plans
  - name: Payment Accounts
  - name: Loyalty Cards
  - name: Wallet
